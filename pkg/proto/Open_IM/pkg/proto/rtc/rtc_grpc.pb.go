// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: rtc/rtc.proto

package rtc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RtcService_SignalMessageAssemble_FullMethodName = "/proto.RtcService/SignalMessageAssemble"
	RtcService_SignalGetRooms_FullMethodName        = "/proto.RtcService/SignalGetRooms"
)

// RtcServiceClient is the client API for RtcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RtcServiceClient interface {
	SignalMessageAssemble(ctx context.Context, in *SignalMessageAssembleReq, opts ...grpc.CallOption) (*SignalMessageAssembleResp, error)
	SignalGetRooms(ctx context.Context, in *SignalGetRoomsReq, opts ...grpc.CallOption) (*SignalGetRoomsResp, error)
}

type rtcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRtcServiceClient(cc grpc.ClientConnInterface) RtcServiceClient {
	return &rtcServiceClient{cc}
}

func (c *rtcServiceClient) SignalMessageAssemble(ctx context.Context, in *SignalMessageAssembleReq, opts ...grpc.CallOption) (*SignalMessageAssembleResp, error) {
	out := new(SignalMessageAssembleResp)
	err := c.cc.Invoke(ctx, RtcService_SignalMessageAssemble_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rtcServiceClient) SignalGetRooms(ctx context.Context, in *SignalGetRoomsReq, opts ...grpc.CallOption) (*SignalGetRoomsResp, error) {
	out := new(SignalGetRoomsResp)
	err := c.cc.Invoke(ctx, RtcService_SignalGetRooms_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RtcServiceServer is the server API for RtcService service.
// All implementations must embed UnimplementedRtcServiceServer
// for forward compatibility
type RtcServiceServer interface {
	SignalMessageAssemble(context.Context, *SignalMessageAssembleReq) (*SignalMessageAssembleResp, error)
	SignalGetRooms(context.Context, *SignalGetRoomsReq) (*SignalGetRoomsResp, error)
	mustEmbedUnimplementedRtcServiceServer()
}

// UnimplementedRtcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRtcServiceServer struct {
}

func (UnimplementedRtcServiceServer) SignalMessageAssemble(context.Context, *SignalMessageAssembleReq) (*SignalMessageAssembleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignalMessageAssemble not implemented")
}
func (UnimplementedRtcServiceServer) SignalGetRooms(context.Context, *SignalGetRoomsReq) (*SignalGetRoomsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignalGetRooms not implemented")
}
func (UnimplementedRtcServiceServer) mustEmbedUnimplementedRtcServiceServer() {}

// UnsafeRtcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RtcServiceServer will
// result in compilation errors.
type UnsafeRtcServiceServer interface {
	mustEmbedUnimplementedRtcServiceServer()
}

func RegisterRtcServiceServer(s grpc.ServiceRegistrar, srv RtcServiceServer) {
	s.RegisterService(&RtcService_ServiceDesc, srv)
}

func _RtcService_SignalMessageAssemble_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignalMessageAssembleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RtcServiceServer).SignalMessageAssemble(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RtcService_SignalMessageAssemble_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RtcServiceServer).SignalMessageAssemble(ctx, req.(*SignalMessageAssembleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RtcService_SignalGetRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignalGetRoomsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RtcServiceServer).SignalGetRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RtcService_SignalGetRooms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RtcServiceServer).SignalGetRooms(ctx, req.(*SignalGetRoomsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// RtcService_ServiceDesc is the grpc.ServiceDesc for RtcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RtcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RtcService",
	HandlerType: (*RtcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignalMessageAssemble",
			Handler:    _RtcService_SignalMessageAssemble_Handler,
		},
		{
			MethodName: "SignalGetRooms",
			Handler:    _RtcService_SignalGetRooms_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rtc/rtc.proto",
}
