// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: cloud_wallet.proto

package cloud_wallet

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CloudWalletService_UserNcountAccount_FullMethodName       = "/cloud_wallet.CloudWalletService/UserNcountAccount"
	CloudWalletService_IdCardRealNameAuth_FullMethodName      = "/cloud_wallet.CloudWalletService/IdCardRealNameAuth"
	CloudWalletService_SetPaymentSecret_FullMethodName        = "/cloud_wallet.CloudWalletService/SetPaymentSecret"
	CloudWalletService_CheckPaymentSecret_FullMethodName      = "/cloud_wallet.CloudWalletService/CheckPaymentSecret"
	CloudWalletService_CloudWalletRecordList_FullMethodName   = "/cloud_wallet.CloudWalletService/CloudWalletRecordList"
	CloudWalletService_BindUserBankcard_FullMethodName        = "/cloud_wallet.CloudWalletService/BindUserBankcard"
	CloudWalletService_BindUserBankcardConfirm_FullMethodName = "/cloud_wallet.CloudWalletService/BindUserBankcardConfirm"
	CloudWalletService_UnBindingUserBankcard_FullMethodName   = "/cloud_wallet.CloudWalletService/UnBindingUserBankcard"
	CloudWalletService_UserRecharge_FullMethodName            = "/cloud_wallet.CloudWalletService/UserRecharge"
	CloudWalletService_UserRechargeConfirm_FullMethodName     = "/cloud_wallet.CloudWalletService/UserRechargeConfirm"
	CloudWalletService_UserWithdrawal_FullMethodName          = "/cloud_wallet.CloudWalletService/UserWithdrawal"
	CloudWalletService_ChargeNotify_FullMethodName            = "/cloud_wallet.CloudWalletService/ChargeNotify"
	CloudWalletService_WithDrawNotify_FullMethodName          = "/cloud_wallet.CloudWalletService/WithDrawNotify"
	CloudWalletService_SendRedPacket_FullMethodName           = "/cloud_wallet.CloudWalletService/SendRedPacket"
	CloudWalletService_SendRedPacketConfirm_FullMethodName    = "/cloud_wallet.CloudWalletService/SendRedPacketConfirm"
	CloudWalletService_ClickRedPacket_FullMethodName          = "/cloud_wallet.CloudWalletService/ClickRedPacket"
	CloudWalletService_ForbidGroupRedPacket_FullMethodName    = "/cloud_wallet.CloudWalletService/ForbidGroupRedPacket"
	CloudWalletService_RedPacketReceiveDetail_FullMethodName  = "/cloud_wallet.CloudWalletService/RedPacketReceiveDetail"
	CloudWalletService_RedPacketInfo_FullMethodName           = "/cloud_wallet.CloudWalletService/RedPacketInfo"
	CloudWalletService_CloudWalletRecordDel_FullMethodName    = "/cloud_wallet.CloudWalletService/CloudWalletRecordDel"
	CloudWalletService_GetVersion_FullMethodName              = "/cloud_wallet.CloudWalletService/GetVersion"
	CloudWalletService_RefoundPacket_FullMethodName           = "/cloud_wallet.CloudWalletService/RefoundPacket"
	CloudWalletService_ThirdPay_FullMethodName                = "/cloud_wallet.CloudWalletService/ThirdPay"
	CloudWalletService_CreateThirdPayOrder_FullMethodName     = "/cloud_wallet.CloudWalletService/CreateThirdPayOrder"
	CloudWalletService_GetThirdPayOrderInfo_FullMethodName    = "/cloud_wallet.CloudWalletService/GetThirdPayOrderInfo"
	CloudWalletService_PayConfirm_FullMethodName              = "/cloud_wallet.CloudWalletService/PayConfirm"
	CloudWalletService_PayCallback_FullMethodName             = "/cloud_wallet.CloudWalletService/PayCallback"
	CloudWalletService_ThirdWithdrawal_FullMethodName         = "/cloud_wallet.CloudWalletService/ThirdWithdrawal"
)

// CloudWalletServiceClient is the client API for CloudWalletService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudWalletServiceClient interface {
	// ==================================云钱包管理 ========
	// 获取云账户信息
	UserNcountAccount(ctx context.Context, in *UserNcountAccountReq, opts ...grpc.CallOption) (*UserNcountAccountResp, error)
	// 身份证实名认证
	IdCardRealNameAuth(ctx context.Context, in *IdCardRealNameAuthReq, opts ...grpc.CallOption) (*IdCardRealNameAuthResp, error)
	// 设置用户支付密码
	SetPaymentSecret(ctx context.Context, in *SetPaymentSecretReq, opts ...grpc.CallOption) (*SetPaymentSecretResp, error)
	// 校验用户支付密码
	CheckPaymentSecret(ctx context.Context, in *CheckPaymentSecretReq, opts ...grpc.CallOption) (*CheckPaymentSecretResp, error)
	// 云钱包收支明细
	CloudWalletRecordList(ctx context.Context, in *CloudWalletRecordListReq, opts ...grpc.CallOption) (*CloudWalletRecordListResp, error)
	//绑定用户银行卡
	BindUserBankcard(ctx context.Context, in *BindUserBankcardReq, opts ...grpc.CallOption) (*BindUserBankcardResp, error)
	//绑定用户银行卡确认code
	BindUserBankcardConfirm(ctx context.Context, in *BindUserBankcardConfirmReq, opts ...grpc.CallOption) (*BindUserBankcardConfirmResp, error)
	//解绑用户银行卡
	UnBindingUserBankcard(ctx context.Context, in *UnBindingUserBankcardReq, opts ...grpc.CallOption) (*UnBindingUserBankcardResp, error)
	// 银行卡充值
	UserRecharge(ctx context.Context, in *UserRechargeReq, opts ...grpc.CallOption) (*UserRechargeResp, error)
	// 银行卡充值code 确认
	UserRechargeConfirm(ctx context.Context, in *UserRechargeConfirmReq, opts ...grpc.CallOption) (*UserRechargeConfirmResp, error)
	// 银行卡提现
	UserWithdrawal(ctx context.Context, in *DrawAccountReq, opts ...grpc.CallOption) (*DrawAccountResp, error)
	// 充值回调接口
	ChargeNotify(ctx context.Context, in *ChargeNotifyReq, opts ...grpc.CallOption) (*ChargeNotifyResp, error)
	// 提现回调接口
	WithDrawNotify(ctx context.Context, in *DrawNotifyReq, opts ...grpc.CallOption) (*DrawNotifyResp, error)
	// 发送红包接口
	SendRedPacket(ctx context.Context, in *SendRedPacketReq, opts ...grpc.CallOption) (*SendRedPacketResp, error)
	// 确认发送红包接口
	SendRedPacketConfirm(ctx context.Context, in *SendRedPacketConfirmReq, opts ...grpc.CallOption) (*SendRedPacketConfirmResp, error)
	// 抢红包接口
	ClickRedPacket(ctx context.Context, in *ClickRedPacketReq, opts ...grpc.CallOption) (*ClickRedPacketResp, error)
	// 禁止群抢红包操作
	ForbidGroupRedPacket(ctx context.Context, in *ForbidGroupRedPacketReq, opts ...grpc.CallOption) (*ForbidGroupRedPacketResp, error)
	//红包领取明细列表
	RedPacketReceiveDetail(ctx context.Context, in *RedPacketReceiveDetailReq, opts ...grpc.CallOption) (*RedPacketReceiveDetailResp, error)
	//红包详情
	RedPacketInfo(ctx context.Context, in *RedPacketInfoReq, opts ...grpc.CallOption) (*RedPacketInfoResp, error)
	//软删除云钱包收支明细记录
	CloudWalletRecordDel(ctx context.Context, in *CloudWalletRecordDelReq, opts ...grpc.CallOption) (*CloudWalletRecordDelResp, error)
	// 获取版本
	GetVersion(ctx context.Context, in *GetVersionReq, opts ...grpc.CallOption) (*GetVersionResp, error)
	// 红包退还
	RefoundPacket(ctx context.Context, in *RefoundPacketReq, opts ...grpc.CallOption) (*RefoundPacketResp, error)
	// 第三方支付
	ThirdPay(ctx context.Context, in *ThirdPayReq, opts ...grpc.CallOption) (*ThirdPayResp, error)
	// 创建第三方订单
	CreateThirdPayOrder(ctx context.Context, in *CreateThirdPayOrderReq, opts ...grpc.CallOption) (*CreateThirdPayOrderResp, error)
	// 查询
	GetThirdPayOrderInfo(ctx context.Context, in *GetThirdPayOrderInfoReq, opts ...grpc.CallOption) (*GetThirdPayOrderInfoResp, error)
	// 第三方支付确认
	PayConfirm(ctx context.Context, in *PayConfirmReq, opts ...grpc.CallOption) (*CommonResp, error)
	// 第三方回调接口
	PayCallback(ctx context.Context, in *PayCallbackReq, opts ...grpc.CallOption) (*PayCallbackResp, error)
	// 第三方提现到云钱包
	ThirdWithdrawal(ctx context.Context, in *ThirdWithdrawalReq, opts ...grpc.CallOption) (*ThirdWithdrawalResp, error)
}

type cloudWalletServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudWalletServiceClient(cc grpc.ClientConnInterface) CloudWalletServiceClient {
	return &cloudWalletServiceClient{cc}
}

func (c *cloudWalletServiceClient) UserNcountAccount(ctx context.Context, in *UserNcountAccountReq, opts ...grpc.CallOption) (*UserNcountAccountResp, error) {
	out := new(UserNcountAccountResp)
	err := c.cc.Invoke(ctx, CloudWalletService_UserNcountAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudWalletServiceClient) IdCardRealNameAuth(ctx context.Context, in *IdCardRealNameAuthReq, opts ...grpc.CallOption) (*IdCardRealNameAuthResp, error) {
	out := new(IdCardRealNameAuthResp)
	err := c.cc.Invoke(ctx, CloudWalletService_IdCardRealNameAuth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudWalletServiceClient) SetPaymentSecret(ctx context.Context, in *SetPaymentSecretReq, opts ...grpc.CallOption) (*SetPaymentSecretResp, error) {
	out := new(SetPaymentSecretResp)
	err := c.cc.Invoke(ctx, CloudWalletService_SetPaymentSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudWalletServiceClient) CheckPaymentSecret(ctx context.Context, in *CheckPaymentSecretReq, opts ...grpc.CallOption) (*CheckPaymentSecretResp, error) {
	out := new(CheckPaymentSecretResp)
	err := c.cc.Invoke(ctx, CloudWalletService_CheckPaymentSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudWalletServiceClient) CloudWalletRecordList(ctx context.Context, in *CloudWalletRecordListReq, opts ...grpc.CallOption) (*CloudWalletRecordListResp, error) {
	out := new(CloudWalletRecordListResp)
	err := c.cc.Invoke(ctx, CloudWalletService_CloudWalletRecordList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudWalletServiceClient) BindUserBankcard(ctx context.Context, in *BindUserBankcardReq, opts ...grpc.CallOption) (*BindUserBankcardResp, error) {
	out := new(BindUserBankcardResp)
	err := c.cc.Invoke(ctx, CloudWalletService_BindUserBankcard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudWalletServiceClient) BindUserBankcardConfirm(ctx context.Context, in *BindUserBankcardConfirmReq, opts ...grpc.CallOption) (*BindUserBankcardConfirmResp, error) {
	out := new(BindUserBankcardConfirmResp)
	err := c.cc.Invoke(ctx, CloudWalletService_BindUserBankcardConfirm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudWalletServiceClient) UnBindingUserBankcard(ctx context.Context, in *UnBindingUserBankcardReq, opts ...grpc.CallOption) (*UnBindingUserBankcardResp, error) {
	out := new(UnBindingUserBankcardResp)
	err := c.cc.Invoke(ctx, CloudWalletService_UnBindingUserBankcard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudWalletServiceClient) UserRecharge(ctx context.Context, in *UserRechargeReq, opts ...grpc.CallOption) (*UserRechargeResp, error) {
	out := new(UserRechargeResp)
	err := c.cc.Invoke(ctx, CloudWalletService_UserRecharge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudWalletServiceClient) UserRechargeConfirm(ctx context.Context, in *UserRechargeConfirmReq, opts ...grpc.CallOption) (*UserRechargeConfirmResp, error) {
	out := new(UserRechargeConfirmResp)
	err := c.cc.Invoke(ctx, CloudWalletService_UserRechargeConfirm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudWalletServiceClient) UserWithdrawal(ctx context.Context, in *DrawAccountReq, opts ...grpc.CallOption) (*DrawAccountResp, error) {
	out := new(DrawAccountResp)
	err := c.cc.Invoke(ctx, CloudWalletService_UserWithdrawal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudWalletServiceClient) ChargeNotify(ctx context.Context, in *ChargeNotifyReq, opts ...grpc.CallOption) (*ChargeNotifyResp, error) {
	out := new(ChargeNotifyResp)
	err := c.cc.Invoke(ctx, CloudWalletService_ChargeNotify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudWalletServiceClient) WithDrawNotify(ctx context.Context, in *DrawNotifyReq, opts ...grpc.CallOption) (*DrawNotifyResp, error) {
	out := new(DrawNotifyResp)
	err := c.cc.Invoke(ctx, CloudWalletService_WithDrawNotify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudWalletServiceClient) SendRedPacket(ctx context.Context, in *SendRedPacketReq, opts ...grpc.CallOption) (*SendRedPacketResp, error) {
	out := new(SendRedPacketResp)
	err := c.cc.Invoke(ctx, CloudWalletService_SendRedPacket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudWalletServiceClient) SendRedPacketConfirm(ctx context.Context, in *SendRedPacketConfirmReq, opts ...grpc.CallOption) (*SendRedPacketConfirmResp, error) {
	out := new(SendRedPacketConfirmResp)
	err := c.cc.Invoke(ctx, CloudWalletService_SendRedPacketConfirm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudWalletServiceClient) ClickRedPacket(ctx context.Context, in *ClickRedPacketReq, opts ...grpc.CallOption) (*ClickRedPacketResp, error) {
	out := new(ClickRedPacketResp)
	err := c.cc.Invoke(ctx, CloudWalletService_ClickRedPacket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudWalletServiceClient) ForbidGroupRedPacket(ctx context.Context, in *ForbidGroupRedPacketReq, opts ...grpc.CallOption) (*ForbidGroupRedPacketResp, error) {
	out := new(ForbidGroupRedPacketResp)
	err := c.cc.Invoke(ctx, CloudWalletService_ForbidGroupRedPacket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudWalletServiceClient) RedPacketReceiveDetail(ctx context.Context, in *RedPacketReceiveDetailReq, opts ...grpc.CallOption) (*RedPacketReceiveDetailResp, error) {
	out := new(RedPacketReceiveDetailResp)
	err := c.cc.Invoke(ctx, CloudWalletService_RedPacketReceiveDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudWalletServiceClient) RedPacketInfo(ctx context.Context, in *RedPacketInfoReq, opts ...grpc.CallOption) (*RedPacketInfoResp, error) {
	out := new(RedPacketInfoResp)
	err := c.cc.Invoke(ctx, CloudWalletService_RedPacketInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudWalletServiceClient) CloudWalletRecordDel(ctx context.Context, in *CloudWalletRecordDelReq, opts ...grpc.CallOption) (*CloudWalletRecordDelResp, error) {
	out := new(CloudWalletRecordDelResp)
	err := c.cc.Invoke(ctx, CloudWalletService_CloudWalletRecordDel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudWalletServiceClient) GetVersion(ctx context.Context, in *GetVersionReq, opts ...grpc.CallOption) (*GetVersionResp, error) {
	out := new(GetVersionResp)
	err := c.cc.Invoke(ctx, CloudWalletService_GetVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudWalletServiceClient) RefoundPacket(ctx context.Context, in *RefoundPacketReq, opts ...grpc.CallOption) (*RefoundPacketResp, error) {
	out := new(RefoundPacketResp)
	err := c.cc.Invoke(ctx, CloudWalletService_RefoundPacket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudWalletServiceClient) ThirdPay(ctx context.Context, in *ThirdPayReq, opts ...grpc.CallOption) (*ThirdPayResp, error) {
	out := new(ThirdPayResp)
	err := c.cc.Invoke(ctx, CloudWalletService_ThirdPay_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudWalletServiceClient) CreateThirdPayOrder(ctx context.Context, in *CreateThirdPayOrderReq, opts ...grpc.CallOption) (*CreateThirdPayOrderResp, error) {
	out := new(CreateThirdPayOrderResp)
	err := c.cc.Invoke(ctx, CloudWalletService_CreateThirdPayOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudWalletServiceClient) GetThirdPayOrderInfo(ctx context.Context, in *GetThirdPayOrderInfoReq, opts ...grpc.CallOption) (*GetThirdPayOrderInfoResp, error) {
	out := new(GetThirdPayOrderInfoResp)
	err := c.cc.Invoke(ctx, CloudWalletService_GetThirdPayOrderInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudWalletServiceClient) PayConfirm(ctx context.Context, in *PayConfirmReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, CloudWalletService_PayConfirm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudWalletServiceClient) PayCallback(ctx context.Context, in *PayCallbackReq, opts ...grpc.CallOption) (*PayCallbackResp, error) {
	out := new(PayCallbackResp)
	err := c.cc.Invoke(ctx, CloudWalletService_PayCallback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudWalletServiceClient) ThirdWithdrawal(ctx context.Context, in *ThirdWithdrawalReq, opts ...grpc.CallOption) (*ThirdWithdrawalResp, error) {
	out := new(ThirdWithdrawalResp)
	err := c.cc.Invoke(ctx, CloudWalletService_ThirdWithdrawal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudWalletServiceServer is the server API for CloudWalletService service.
// All implementations must embed UnimplementedCloudWalletServiceServer
// for forward compatibility
type CloudWalletServiceServer interface {
	// ==================================云钱包管理 ========
	// 获取云账户信息
	UserNcountAccount(context.Context, *UserNcountAccountReq) (*UserNcountAccountResp, error)
	// 身份证实名认证
	IdCardRealNameAuth(context.Context, *IdCardRealNameAuthReq) (*IdCardRealNameAuthResp, error)
	// 设置用户支付密码
	SetPaymentSecret(context.Context, *SetPaymentSecretReq) (*SetPaymentSecretResp, error)
	// 校验用户支付密码
	CheckPaymentSecret(context.Context, *CheckPaymentSecretReq) (*CheckPaymentSecretResp, error)
	// 云钱包收支明细
	CloudWalletRecordList(context.Context, *CloudWalletRecordListReq) (*CloudWalletRecordListResp, error)
	//绑定用户银行卡
	BindUserBankcard(context.Context, *BindUserBankcardReq) (*BindUserBankcardResp, error)
	//绑定用户银行卡确认code
	BindUserBankcardConfirm(context.Context, *BindUserBankcardConfirmReq) (*BindUserBankcardConfirmResp, error)
	//解绑用户银行卡
	UnBindingUserBankcard(context.Context, *UnBindingUserBankcardReq) (*UnBindingUserBankcardResp, error)
	// 银行卡充值
	UserRecharge(context.Context, *UserRechargeReq) (*UserRechargeResp, error)
	// 银行卡充值code 确认
	UserRechargeConfirm(context.Context, *UserRechargeConfirmReq) (*UserRechargeConfirmResp, error)
	// 银行卡提现
	UserWithdrawal(context.Context, *DrawAccountReq) (*DrawAccountResp, error)
	// 充值回调接口
	ChargeNotify(context.Context, *ChargeNotifyReq) (*ChargeNotifyResp, error)
	// 提现回调接口
	WithDrawNotify(context.Context, *DrawNotifyReq) (*DrawNotifyResp, error)
	// 发送红包接口
	SendRedPacket(context.Context, *SendRedPacketReq) (*SendRedPacketResp, error)
	// 确认发送红包接口
	SendRedPacketConfirm(context.Context, *SendRedPacketConfirmReq) (*SendRedPacketConfirmResp, error)
	// 抢红包接口
	ClickRedPacket(context.Context, *ClickRedPacketReq) (*ClickRedPacketResp, error)
	// 禁止群抢红包操作
	ForbidGroupRedPacket(context.Context, *ForbidGroupRedPacketReq) (*ForbidGroupRedPacketResp, error)
	//红包领取明细列表
	RedPacketReceiveDetail(context.Context, *RedPacketReceiveDetailReq) (*RedPacketReceiveDetailResp, error)
	//红包详情
	RedPacketInfo(context.Context, *RedPacketInfoReq) (*RedPacketInfoResp, error)
	//软删除云钱包收支明细记录
	CloudWalletRecordDel(context.Context, *CloudWalletRecordDelReq) (*CloudWalletRecordDelResp, error)
	// 获取版本
	GetVersion(context.Context, *GetVersionReq) (*GetVersionResp, error)
	// 红包退还
	RefoundPacket(context.Context, *RefoundPacketReq) (*RefoundPacketResp, error)
	// 第三方支付
	ThirdPay(context.Context, *ThirdPayReq) (*ThirdPayResp, error)
	// 创建第三方订单
	CreateThirdPayOrder(context.Context, *CreateThirdPayOrderReq) (*CreateThirdPayOrderResp, error)
	// 查询
	GetThirdPayOrderInfo(context.Context, *GetThirdPayOrderInfoReq) (*GetThirdPayOrderInfoResp, error)
	// 第三方支付确认
	PayConfirm(context.Context, *PayConfirmReq) (*CommonResp, error)
	// 第三方回调接口
	PayCallback(context.Context, *PayCallbackReq) (*PayCallbackResp, error)
	// 第三方提现到云钱包
	ThirdWithdrawal(context.Context, *ThirdWithdrawalReq) (*ThirdWithdrawalResp, error)
	mustEmbedUnimplementedCloudWalletServiceServer()
}

// UnimplementedCloudWalletServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCloudWalletServiceServer struct {
}

func (UnimplementedCloudWalletServiceServer) UserNcountAccount(context.Context, *UserNcountAccountReq) (*UserNcountAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserNcountAccount not implemented")
}
func (UnimplementedCloudWalletServiceServer) IdCardRealNameAuth(context.Context, *IdCardRealNameAuthReq) (*IdCardRealNameAuthResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IdCardRealNameAuth not implemented")
}
func (UnimplementedCloudWalletServiceServer) SetPaymentSecret(context.Context, *SetPaymentSecretReq) (*SetPaymentSecretResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPaymentSecret not implemented")
}
func (UnimplementedCloudWalletServiceServer) CheckPaymentSecret(context.Context, *CheckPaymentSecretReq) (*CheckPaymentSecretResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPaymentSecret not implemented")
}
func (UnimplementedCloudWalletServiceServer) CloudWalletRecordList(context.Context, *CloudWalletRecordListReq) (*CloudWalletRecordListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloudWalletRecordList not implemented")
}
func (UnimplementedCloudWalletServiceServer) BindUserBankcard(context.Context, *BindUserBankcardReq) (*BindUserBankcardResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindUserBankcard not implemented")
}
func (UnimplementedCloudWalletServiceServer) BindUserBankcardConfirm(context.Context, *BindUserBankcardConfirmReq) (*BindUserBankcardConfirmResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindUserBankcardConfirm not implemented")
}
func (UnimplementedCloudWalletServiceServer) UnBindingUserBankcard(context.Context, *UnBindingUserBankcardReq) (*UnBindingUserBankcardResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnBindingUserBankcard not implemented")
}
func (UnimplementedCloudWalletServiceServer) UserRecharge(context.Context, *UserRechargeReq) (*UserRechargeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRecharge not implemented")
}
func (UnimplementedCloudWalletServiceServer) UserRechargeConfirm(context.Context, *UserRechargeConfirmReq) (*UserRechargeConfirmResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRechargeConfirm not implemented")
}
func (UnimplementedCloudWalletServiceServer) UserWithdrawal(context.Context, *DrawAccountReq) (*DrawAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserWithdrawal not implemented")
}
func (UnimplementedCloudWalletServiceServer) ChargeNotify(context.Context, *ChargeNotifyReq) (*ChargeNotifyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChargeNotify not implemented")
}
func (UnimplementedCloudWalletServiceServer) WithDrawNotify(context.Context, *DrawNotifyReq) (*DrawNotifyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithDrawNotify not implemented")
}
func (UnimplementedCloudWalletServiceServer) SendRedPacket(context.Context, *SendRedPacketReq) (*SendRedPacketResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRedPacket not implemented")
}
func (UnimplementedCloudWalletServiceServer) SendRedPacketConfirm(context.Context, *SendRedPacketConfirmReq) (*SendRedPacketConfirmResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRedPacketConfirm not implemented")
}
func (UnimplementedCloudWalletServiceServer) ClickRedPacket(context.Context, *ClickRedPacketReq) (*ClickRedPacketResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClickRedPacket not implemented")
}
func (UnimplementedCloudWalletServiceServer) ForbidGroupRedPacket(context.Context, *ForbidGroupRedPacketReq) (*ForbidGroupRedPacketResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForbidGroupRedPacket not implemented")
}
func (UnimplementedCloudWalletServiceServer) RedPacketReceiveDetail(context.Context, *RedPacketReceiveDetailReq) (*RedPacketReceiveDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedPacketReceiveDetail not implemented")
}
func (UnimplementedCloudWalletServiceServer) RedPacketInfo(context.Context, *RedPacketInfoReq) (*RedPacketInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedPacketInfo not implemented")
}
func (UnimplementedCloudWalletServiceServer) CloudWalletRecordDel(context.Context, *CloudWalletRecordDelReq) (*CloudWalletRecordDelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloudWalletRecordDel not implemented")
}
func (UnimplementedCloudWalletServiceServer) GetVersion(context.Context, *GetVersionReq) (*GetVersionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedCloudWalletServiceServer) RefoundPacket(context.Context, *RefoundPacketReq) (*RefoundPacketResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefoundPacket not implemented")
}
func (UnimplementedCloudWalletServiceServer) ThirdPay(context.Context, *ThirdPayReq) (*ThirdPayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ThirdPay not implemented")
}
func (UnimplementedCloudWalletServiceServer) CreateThirdPayOrder(context.Context, *CreateThirdPayOrderReq) (*CreateThirdPayOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateThirdPayOrder not implemented")
}
func (UnimplementedCloudWalletServiceServer) GetThirdPayOrderInfo(context.Context, *GetThirdPayOrderInfoReq) (*GetThirdPayOrderInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThirdPayOrderInfo not implemented")
}
func (UnimplementedCloudWalletServiceServer) PayConfirm(context.Context, *PayConfirmReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayConfirm not implemented")
}
func (UnimplementedCloudWalletServiceServer) PayCallback(context.Context, *PayCallbackReq) (*PayCallbackResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayCallback not implemented")
}
func (UnimplementedCloudWalletServiceServer) ThirdWithdrawal(context.Context, *ThirdWithdrawalReq) (*ThirdWithdrawalResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ThirdWithdrawal not implemented")
}
func (UnimplementedCloudWalletServiceServer) mustEmbedUnimplementedCloudWalletServiceServer() {}

// UnsafeCloudWalletServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudWalletServiceServer will
// result in compilation errors.
type UnsafeCloudWalletServiceServer interface {
	mustEmbedUnimplementedCloudWalletServiceServer()
}

func RegisterCloudWalletServiceServer(s grpc.ServiceRegistrar, srv CloudWalletServiceServer) {
	s.RegisterService(&CloudWalletService_ServiceDesc, srv)
}

func _CloudWalletService_UserNcountAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserNcountAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudWalletServiceServer).UserNcountAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudWalletService_UserNcountAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudWalletServiceServer).UserNcountAccount(ctx, req.(*UserNcountAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudWalletService_IdCardRealNameAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdCardRealNameAuthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudWalletServiceServer).IdCardRealNameAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudWalletService_IdCardRealNameAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudWalletServiceServer).IdCardRealNameAuth(ctx, req.(*IdCardRealNameAuthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudWalletService_SetPaymentSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPaymentSecretReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudWalletServiceServer).SetPaymentSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudWalletService_SetPaymentSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudWalletServiceServer).SetPaymentSecret(ctx, req.(*SetPaymentSecretReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudWalletService_CheckPaymentSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPaymentSecretReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudWalletServiceServer).CheckPaymentSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudWalletService_CheckPaymentSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudWalletServiceServer).CheckPaymentSecret(ctx, req.(*CheckPaymentSecretReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudWalletService_CloudWalletRecordList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudWalletRecordListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudWalletServiceServer).CloudWalletRecordList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudWalletService_CloudWalletRecordList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudWalletServiceServer).CloudWalletRecordList(ctx, req.(*CloudWalletRecordListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudWalletService_BindUserBankcard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindUserBankcardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudWalletServiceServer).BindUserBankcard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudWalletService_BindUserBankcard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudWalletServiceServer).BindUserBankcard(ctx, req.(*BindUserBankcardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudWalletService_BindUserBankcardConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindUserBankcardConfirmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudWalletServiceServer).BindUserBankcardConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudWalletService_BindUserBankcardConfirm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudWalletServiceServer).BindUserBankcardConfirm(ctx, req.(*BindUserBankcardConfirmReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudWalletService_UnBindingUserBankcard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnBindingUserBankcardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudWalletServiceServer).UnBindingUserBankcard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudWalletService_UnBindingUserBankcard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudWalletServiceServer).UnBindingUserBankcard(ctx, req.(*UnBindingUserBankcardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudWalletService_UserRecharge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRechargeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudWalletServiceServer).UserRecharge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudWalletService_UserRecharge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudWalletServiceServer).UserRecharge(ctx, req.(*UserRechargeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudWalletService_UserRechargeConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRechargeConfirmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudWalletServiceServer).UserRechargeConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudWalletService_UserRechargeConfirm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudWalletServiceServer).UserRechargeConfirm(ctx, req.(*UserRechargeConfirmReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudWalletService_UserWithdrawal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DrawAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudWalletServiceServer).UserWithdrawal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudWalletService_UserWithdrawal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudWalletServiceServer).UserWithdrawal(ctx, req.(*DrawAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudWalletService_ChargeNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChargeNotifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudWalletServiceServer).ChargeNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudWalletService_ChargeNotify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudWalletServiceServer).ChargeNotify(ctx, req.(*ChargeNotifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudWalletService_WithDrawNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DrawNotifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudWalletServiceServer).WithDrawNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudWalletService_WithDrawNotify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudWalletServiceServer).WithDrawNotify(ctx, req.(*DrawNotifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudWalletService_SendRedPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRedPacketReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudWalletServiceServer).SendRedPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudWalletService_SendRedPacket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudWalletServiceServer).SendRedPacket(ctx, req.(*SendRedPacketReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudWalletService_SendRedPacketConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRedPacketConfirmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudWalletServiceServer).SendRedPacketConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudWalletService_SendRedPacketConfirm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudWalletServiceServer).SendRedPacketConfirm(ctx, req.(*SendRedPacketConfirmReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudWalletService_ClickRedPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClickRedPacketReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudWalletServiceServer).ClickRedPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudWalletService_ClickRedPacket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudWalletServiceServer).ClickRedPacket(ctx, req.(*ClickRedPacketReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudWalletService_ForbidGroupRedPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForbidGroupRedPacketReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudWalletServiceServer).ForbidGroupRedPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudWalletService_ForbidGroupRedPacket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudWalletServiceServer).ForbidGroupRedPacket(ctx, req.(*ForbidGroupRedPacketReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudWalletService_RedPacketReceiveDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedPacketReceiveDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudWalletServiceServer).RedPacketReceiveDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudWalletService_RedPacketReceiveDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudWalletServiceServer).RedPacketReceiveDetail(ctx, req.(*RedPacketReceiveDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudWalletService_RedPacketInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedPacketInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudWalletServiceServer).RedPacketInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudWalletService_RedPacketInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudWalletServiceServer).RedPacketInfo(ctx, req.(*RedPacketInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudWalletService_CloudWalletRecordDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudWalletRecordDelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudWalletServiceServer).CloudWalletRecordDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudWalletService_CloudWalletRecordDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudWalletServiceServer).CloudWalletRecordDel(ctx, req.(*CloudWalletRecordDelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudWalletService_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudWalletServiceServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudWalletService_GetVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudWalletServiceServer).GetVersion(ctx, req.(*GetVersionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudWalletService_RefoundPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefoundPacketReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudWalletServiceServer).RefoundPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudWalletService_RefoundPacket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudWalletServiceServer).RefoundPacket(ctx, req.(*RefoundPacketReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudWalletService_ThirdPay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThirdPayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudWalletServiceServer).ThirdPay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudWalletService_ThirdPay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudWalletServiceServer).ThirdPay(ctx, req.(*ThirdPayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudWalletService_CreateThirdPayOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateThirdPayOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudWalletServiceServer).CreateThirdPayOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudWalletService_CreateThirdPayOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudWalletServiceServer).CreateThirdPayOrder(ctx, req.(*CreateThirdPayOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudWalletService_GetThirdPayOrderInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetThirdPayOrderInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudWalletServiceServer).GetThirdPayOrderInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudWalletService_GetThirdPayOrderInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudWalletServiceServer).GetThirdPayOrderInfo(ctx, req.(*GetThirdPayOrderInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudWalletService_PayConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayConfirmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudWalletServiceServer).PayConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudWalletService_PayConfirm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudWalletServiceServer).PayConfirm(ctx, req.(*PayConfirmReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudWalletService_PayCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayCallbackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudWalletServiceServer).PayCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudWalletService_PayCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudWalletServiceServer).PayCallback(ctx, req.(*PayCallbackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudWalletService_ThirdWithdrawal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThirdWithdrawalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudWalletServiceServer).ThirdWithdrawal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudWalletService_ThirdWithdrawal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudWalletServiceServer).ThirdWithdrawal(ctx, req.(*ThirdWithdrawalReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudWalletService_ServiceDesc is the grpc.ServiceDesc for CloudWalletService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudWalletService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud_wallet.CloudWalletService",
	HandlerType: (*CloudWalletServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserNcountAccount",
			Handler:    _CloudWalletService_UserNcountAccount_Handler,
		},
		{
			MethodName: "IdCardRealNameAuth",
			Handler:    _CloudWalletService_IdCardRealNameAuth_Handler,
		},
		{
			MethodName: "SetPaymentSecret",
			Handler:    _CloudWalletService_SetPaymentSecret_Handler,
		},
		{
			MethodName: "CheckPaymentSecret",
			Handler:    _CloudWalletService_CheckPaymentSecret_Handler,
		},
		{
			MethodName: "CloudWalletRecordList",
			Handler:    _CloudWalletService_CloudWalletRecordList_Handler,
		},
		{
			MethodName: "BindUserBankcard",
			Handler:    _CloudWalletService_BindUserBankcard_Handler,
		},
		{
			MethodName: "BindUserBankcardConfirm",
			Handler:    _CloudWalletService_BindUserBankcardConfirm_Handler,
		},
		{
			MethodName: "UnBindingUserBankcard",
			Handler:    _CloudWalletService_UnBindingUserBankcard_Handler,
		},
		{
			MethodName: "UserRecharge",
			Handler:    _CloudWalletService_UserRecharge_Handler,
		},
		{
			MethodName: "UserRechargeConfirm",
			Handler:    _CloudWalletService_UserRechargeConfirm_Handler,
		},
		{
			MethodName: "UserWithdrawal",
			Handler:    _CloudWalletService_UserWithdrawal_Handler,
		},
		{
			MethodName: "ChargeNotify",
			Handler:    _CloudWalletService_ChargeNotify_Handler,
		},
		{
			MethodName: "WithDrawNotify",
			Handler:    _CloudWalletService_WithDrawNotify_Handler,
		},
		{
			MethodName: "SendRedPacket",
			Handler:    _CloudWalletService_SendRedPacket_Handler,
		},
		{
			MethodName: "SendRedPacketConfirm",
			Handler:    _CloudWalletService_SendRedPacketConfirm_Handler,
		},
		{
			MethodName: "ClickRedPacket",
			Handler:    _CloudWalletService_ClickRedPacket_Handler,
		},
		{
			MethodName: "ForbidGroupRedPacket",
			Handler:    _CloudWalletService_ForbidGroupRedPacket_Handler,
		},
		{
			MethodName: "RedPacketReceiveDetail",
			Handler:    _CloudWalletService_RedPacketReceiveDetail_Handler,
		},
		{
			MethodName: "RedPacketInfo",
			Handler:    _CloudWalletService_RedPacketInfo_Handler,
		},
		{
			MethodName: "CloudWalletRecordDel",
			Handler:    _CloudWalletService_CloudWalletRecordDel_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _CloudWalletService_GetVersion_Handler,
		},
		{
			MethodName: "RefoundPacket",
			Handler:    _CloudWalletService_RefoundPacket_Handler,
		},
		{
			MethodName: "ThirdPay",
			Handler:    _CloudWalletService_ThirdPay_Handler,
		},
		{
			MethodName: "CreateThirdPayOrder",
			Handler:    _CloudWalletService_CreateThirdPayOrder_Handler,
		},
		{
			MethodName: "GetThirdPayOrderInfo",
			Handler:    _CloudWalletService_GetThirdPayOrderInfo_Handler,
		},
		{
			MethodName: "PayConfirm",
			Handler:    _CloudWalletService_PayConfirm_Handler,
		},
		{
			MethodName: "PayCallback",
			Handler:    _CloudWalletService_PayCallback_Handler,
		},
		{
			MethodName: "ThirdWithdrawal",
			Handler:    _CloudWalletService_ThirdWithdrawal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud_wallet.proto",
}
