// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: admin_cms/admin_cms.proto

package admin_cms

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AdminCMS_AdminLogin_FullMethodName                        = "/admin_cms.adminCMS/AdminLogin"
	AdminCMS_AddUserRegisterAddFriendIDList_FullMethodName    = "/admin_cms.adminCMS/AddUserRegisterAddFriendIDList"
	AdminCMS_ReduceUserRegisterAddFriendIDList_FullMethodName = "/admin_cms.adminCMS/ReduceUserRegisterAddFriendIDList"
	AdminCMS_GetUserRegisterAddFriendIDList_FullMethodName    = "/admin_cms.adminCMS/GetUserRegisterAddFriendIDList"
	AdminCMS_GetChatLogs_FullMethodName                       = "/admin_cms.adminCMS/GetChatLogs"
	AdminCMS_GetActiveUser_FullMethodName                     = "/admin_cms.adminCMS/GetActiveUser"
	AdminCMS_GetActiveGroup_FullMethodName                    = "/admin_cms.adminCMS/GetActiveGroup"
	AdminCMS_GetMessageStatistics_FullMethodName              = "/admin_cms.adminCMS/GetMessageStatistics"
	AdminCMS_GetGroupStatistics_FullMethodName                = "/admin_cms.adminCMS/GetGroupStatistics"
	AdminCMS_GetUserStatistics_FullMethodName                 = "/admin_cms.adminCMS/GetUserStatistics"
	AdminCMS_GenerateInvitationCode_FullMethodName            = "/admin_cms.adminCMS/GenerateInvitationCode"
	AdminCMS_GetInvitationCodes_FullMethodName                = "/admin_cms.adminCMS/GetInvitationCodes"
	AdminCMS_QueryIPRegister_FullMethodName                   = "/admin_cms.adminCMS/QueryIPRegister"
	AdminCMS_AddIPLimit_FullMethodName                        = "/admin_cms.adminCMS/AddIPLimit"
	AdminCMS_RemoveIPLimit_FullMethodName                     = "/admin_cms.adminCMS/RemoveIPLimit"
	AdminCMS_QueryUserIDIPLimitLogin_FullMethodName           = "/admin_cms.adminCMS/QueryUserIDIPLimitLogin"
	AdminCMS_AddUserIPLimitLogin_FullMethodName               = "/admin_cms.adminCMS/AddUserIPLimitLogin"
	AdminCMS_RemoveUserIPLimit_FullMethodName                 = "/admin_cms.adminCMS/RemoveUserIPLimit"
	AdminCMS_GetClientInitConfig_FullMethodName               = "/admin_cms.adminCMS/GetClientInitConfig"
	AdminCMS_SetClientInitConfig_FullMethodName               = "/admin_cms.adminCMS/SetClientInitConfig"
	AdminCMS_GetUserFriends_FullMethodName                    = "/admin_cms.adminCMS/GetUserFriends"
	AdminCMS_GetUserIDByEmailAndPhoneNumber_FullMethodName    = "/admin_cms.adminCMS/GetUserIDByEmailAndPhoneNumber"
	AdminCMS_GetUserToken_FullMethodName                      = "/admin_cms.adminCMS/GetUserToken"
)

// AdminCMSClient is the client API for AdminCMS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminCMSClient interface {
	AdminLogin(ctx context.Context, in *AdminLoginReq, opts ...grpc.CallOption) (*AdminLoginResp, error)
	AddUserRegisterAddFriendIDList(ctx context.Context, in *AddUserRegisterAddFriendIDListReq, opts ...grpc.CallOption) (*AddUserRegisterAddFriendIDListResp, error)
	ReduceUserRegisterAddFriendIDList(ctx context.Context, in *ReduceUserRegisterAddFriendIDListReq, opts ...grpc.CallOption) (*ReduceUserRegisterAddFriendIDListResp, error)
	GetUserRegisterAddFriendIDList(ctx context.Context, in *GetUserRegisterAddFriendIDListReq, opts ...grpc.CallOption) (*GetUserRegisterAddFriendIDListResp, error)
	GetChatLogs(ctx context.Context, in *GetChatLogsReq, opts ...grpc.CallOption) (*GetChatLogsResp, error)
	GetActiveUser(ctx context.Context, in *GetActiveUserReq, opts ...grpc.CallOption) (*GetActiveUserResp, error)
	GetActiveGroup(ctx context.Context, in *GetActiveGroupReq, opts ...grpc.CallOption) (*GetActiveGroupResp, error)
	GetMessageStatistics(ctx context.Context, in *GetMessageStatisticsReq, opts ...grpc.CallOption) (*GetMessageStatisticsResp, error)
	GetGroupStatistics(ctx context.Context, in *GetGroupStatisticsReq, opts ...grpc.CallOption) (*GetGroupStatisticsResp, error)
	GetUserStatistics(ctx context.Context, in *GetUserStatisticsReq, opts ...grpc.CallOption) (*GetUserStatisticsResp, error)
	GenerateInvitationCode(ctx context.Context, in *GenerateInvitationCodeReq, opts ...grpc.CallOption) (*GenerateInvitationCodeResp, error)
	GetInvitationCodes(ctx context.Context, in *GetInvitationCodesReq, opts ...grpc.CallOption) (*GetInvitationCodesResp, error)
	QueryIPRegister(ctx context.Context, in *QueryIPRegisterReq, opts ...grpc.CallOption) (*QueryIPRegisterResp, error)
	AddIPLimit(ctx context.Context, in *AddIPLimitReq, opts ...grpc.CallOption) (*AddIPLimitResp, error)
	RemoveIPLimit(ctx context.Context, in *RemoveIPLimitReq, opts ...grpc.CallOption) (*RemoveIPLimitResp, error)
	QueryUserIDIPLimitLogin(ctx context.Context, in *QueryUserIDIPLimitLoginReq, opts ...grpc.CallOption) (*QueryUserIDIPLimitLoginResp, error)
	AddUserIPLimitLogin(ctx context.Context, in *AddUserIPLimitLoginReq, opts ...grpc.CallOption) (*AddUserIPLimitLoginResp, error)
	RemoveUserIPLimit(ctx context.Context, in *RemoveUserIPLimitReq, opts ...grpc.CallOption) (*RemoveUserIPLimitResp, error)
	GetClientInitConfig(ctx context.Context, in *GetClientInitConfigReq, opts ...grpc.CallOption) (*GetClientInitConfigResp, error)
	SetClientInitConfig(ctx context.Context, in *SetClientInitConfigReq, opts ...grpc.CallOption) (*SetClientInitConfigResp, error)
	GetUserFriends(ctx context.Context, in *GetUserFriendsReq, opts ...grpc.CallOption) (*GetUserFriendsResp, error)
	GetUserIDByEmailAndPhoneNumber(ctx context.Context, in *GetUserIDByEmailAndPhoneNumberReq, opts ...grpc.CallOption) (*GetUserIDByEmailAndPhoneNumberResp, error)
	GetUserToken(ctx context.Context, in *GetUserTokenReq, opts ...grpc.CallOption) (*GetUserTokenResp, error)
}

type adminCMSClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminCMSClient(cc grpc.ClientConnInterface) AdminCMSClient {
	return &adminCMSClient{cc}
}

func (c *adminCMSClient) AdminLogin(ctx context.Context, in *AdminLoginReq, opts ...grpc.CallOption) (*AdminLoginResp, error) {
	out := new(AdminLoginResp)
	err := c.cc.Invoke(ctx, AdminCMS_AdminLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) AddUserRegisterAddFriendIDList(ctx context.Context, in *AddUserRegisterAddFriendIDListReq, opts ...grpc.CallOption) (*AddUserRegisterAddFriendIDListResp, error) {
	out := new(AddUserRegisterAddFriendIDListResp)
	err := c.cc.Invoke(ctx, AdminCMS_AddUserRegisterAddFriendIDList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) ReduceUserRegisterAddFriendIDList(ctx context.Context, in *ReduceUserRegisterAddFriendIDListReq, opts ...grpc.CallOption) (*ReduceUserRegisterAddFriendIDListResp, error) {
	out := new(ReduceUserRegisterAddFriendIDListResp)
	err := c.cc.Invoke(ctx, AdminCMS_ReduceUserRegisterAddFriendIDList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) GetUserRegisterAddFriendIDList(ctx context.Context, in *GetUserRegisterAddFriendIDListReq, opts ...grpc.CallOption) (*GetUserRegisterAddFriendIDListResp, error) {
	out := new(GetUserRegisterAddFriendIDListResp)
	err := c.cc.Invoke(ctx, AdminCMS_GetUserRegisterAddFriendIDList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) GetChatLogs(ctx context.Context, in *GetChatLogsReq, opts ...grpc.CallOption) (*GetChatLogsResp, error) {
	out := new(GetChatLogsResp)
	err := c.cc.Invoke(ctx, AdminCMS_GetChatLogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) GetActiveUser(ctx context.Context, in *GetActiveUserReq, opts ...grpc.CallOption) (*GetActiveUserResp, error) {
	out := new(GetActiveUserResp)
	err := c.cc.Invoke(ctx, AdminCMS_GetActiveUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) GetActiveGroup(ctx context.Context, in *GetActiveGroupReq, opts ...grpc.CallOption) (*GetActiveGroupResp, error) {
	out := new(GetActiveGroupResp)
	err := c.cc.Invoke(ctx, AdminCMS_GetActiveGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) GetMessageStatistics(ctx context.Context, in *GetMessageStatisticsReq, opts ...grpc.CallOption) (*GetMessageStatisticsResp, error) {
	out := new(GetMessageStatisticsResp)
	err := c.cc.Invoke(ctx, AdminCMS_GetMessageStatistics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) GetGroupStatistics(ctx context.Context, in *GetGroupStatisticsReq, opts ...grpc.CallOption) (*GetGroupStatisticsResp, error) {
	out := new(GetGroupStatisticsResp)
	err := c.cc.Invoke(ctx, AdminCMS_GetGroupStatistics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) GetUserStatistics(ctx context.Context, in *GetUserStatisticsReq, opts ...grpc.CallOption) (*GetUserStatisticsResp, error) {
	out := new(GetUserStatisticsResp)
	err := c.cc.Invoke(ctx, AdminCMS_GetUserStatistics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) GenerateInvitationCode(ctx context.Context, in *GenerateInvitationCodeReq, opts ...grpc.CallOption) (*GenerateInvitationCodeResp, error) {
	out := new(GenerateInvitationCodeResp)
	err := c.cc.Invoke(ctx, AdminCMS_GenerateInvitationCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) GetInvitationCodes(ctx context.Context, in *GetInvitationCodesReq, opts ...grpc.CallOption) (*GetInvitationCodesResp, error) {
	out := new(GetInvitationCodesResp)
	err := c.cc.Invoke(ctx, AdminCMS_GetInvitationCodes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) QueryIPRegister(ctx context.Context, in *QueryIPRegisterReq, opts ...grpc.CallOption) (*QueryIPRegisterResp, error) {
	out := new(QueryIPRegisterResp)
	err := c.cc.Invoke(ctx, AdminCMS_QueryIPRegister_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) AddIPLimit(ctx context.Context, in *AddIPLimitReq, opts ...grpc.CallOption) (*AddIPLimitResp, error) {
	out := new(AddIPLimitResp)
	err := c.cc.Invoke(ctx, AdminCMS_AddIPLimit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) RemoveIPLimit(ctx context.Context, in *RemoveIPLimitReq, opts ...grpc.CallOption) (*RemoveIPLimitResp, error) {
	out := new(RemoveIPLimitResp)
	err := c.cc.Invoke(ctx, AdminCMS_RemoveIPLimit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) QueryUserIDIPLimitLogin(ctx context.Context, in *QueryUserIDIPLimitLoginReq, opts ...grpc.CallOption) (*QueryUserIDIPLimitLoginResp, error) {
	out := new(QueryUserIDIPLimitLoginResp)
	err := c.cc.Invoke(ctx, AdminCMS_QueryUserIDIPLimitLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) AddUserIPLimitLogin(ctx context.Context, in *AddUserIPLimitLoginReq, opts ...grpc.CallOption) (*AddUserIPLimitLoginResp, error) {
	out := new(AddUserIPLimitLoginResp)
	err := c.cc.Invoke(ctx, AdminCMS_AddUserIPLimitLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) RemoveUserIPLimit(ctx context.Context, in *RemoveUserIPLimitReq, opts ...grpc.CallOption) (*RemoveUserIPLimitResp, error) {
	out := new(RemoveUserIPLimitResp)
	err := c.cc.Invoke(ctx, AdminCMS_RemoveUserIPLimit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) GetClientInitConfig(ctx context.Context, in *GetClientInitConfigReq, opts ...grpc.CallOption) (*GetClientInitConfigResp, error) {
	out := new(GetClientInitConfigResp)
	err := c.cc.Invoke(ctx, AdminCMS_GetClientInitConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) SetClientInitConfig(ctx context.Context, in *SetClientInitConfigReq, opts ...grpc.CallOption) (*SetClientInitConfigResp, error) {
	out := new(SetClientInitConfigResp)
	err := c.cc.Invoke(ctx, AdminCMS_SetClientInitConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) GetUserFriends(ctx context.Context, in *GetUserFriendsReq, opts ...grpc.CallOption) (*GetUserFriendsResp, error) {
	out := new(GetUserFriendsResp)
	err := c.cc.Invoke(ctx, AdminCMS_GetUserFriends_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) GetUserIDByEmailAndPhoneNumber(ctx context.Context, in *GetUserIDByEmailAndPhoneNumberReq, opts ...grpc.CallOption) (*GetUserIDByEmailAndPhoneNumberResp, error) {
	out := new(GetUserIDByEmailAndPhoneNumberResp)
	err := c.cc.Invoke(ctx, AdminCMS_GetUserIDByEmailAndPhoneNumber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) GetUserToken(ctx context.Context, in *GetUserTokenReq, opts ...grpc.CallOption) (*GetUserTokenResp, error) {
	out := new(GetUserTokenResp)
	err := c.cc.Invoke(ctx, AdminCMS_GetUserToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminCMSServer is the server API for AdminCMS service.
// All implementations must embed UnimplementedAdminCMSServer
// for forward compatibility
type AdminCMSServer interface {
	AdminLogin(context.Context, *AdminLoginReq) (*AdminLoginResp, error)
	AddUserRegisterAddFriendIDList(context.Context, *AddUserRegisterAddFriendIDListReq) (*AddUserRegisterAddFriendIDListResp, error)
	ReduceUserRegisterAddFriendIDList(context.Context, *ReduceUserRegisterAddFriendIDListReq) (*ReduceUserRegisterAddFriendIDListResp, error)
	GetUserRegisterAddFriendIDList(context.Context, *GetUserRegisterAddFriendIDListReq) (*GetUserRegisterAddFriendIDListResp, error)
	GetChatLogs(context.Context, *GetChatLogsReq) (*GetChatLogsResp, error)
	GetActiveUser(context.Context, *GetActiveUserReq) (*GetActiveUserResp, error)
	GetActiveGroup(context.Context, *GetActiveGroupReq) (*GetActiveGroupResp, error)
	GetMessageStatistics(context.Context, *GetMessageStatisticsReq) (*GetMessageStatisticsResp, error)
	GetGroupStatistics(context.Context, *GetGroupStatisticsReq) (*GetGroupStatisticsResp, error)
	GetUserStatistics(context.Context, *GetUserStatisticsReq) (*GetUserStatisticsResp, error)
	GenerateInvitationCode(context.Context, *GenerateInvitationCodeReq) (*GenerateInvitationCodeResp, error)
	GetInvitationCodes(context.Context, *GetInvitationCodesReq) (*GetInvitationCodesResp, error)
	QueryIPRegister(context.Context, *QueryIPRegisterReq) (*QueryIPRegisterResp, error)
	AddIPLimit(context.Context, *AddIPLimitReq) (*AddIPLimitResp, error)
	RemoveIPLimit(context.Context, *RemoveIPLimitReq) (*RemoveIPLimitResp, error)
	QueryUserIDIPLimitLogin(context.Context, *QueryUserIDIPLimitLoginReq) (*QueryUserIDIPLimitLoginResp, error)
	AddUserIPLimitLogin(context.Context, *AddUserIPLimitLoginReq) (*AddUserIPLimitLoginResp, error)
	RemoveUserIPLimit(context.Context, *RemoveUserIPLimitReq) (*RemoveUserIPLimitResp, error)
	GetClientInitConfig(context.Context, *GetClientInitConfigReq) (*GetClientInitConfigResp, error)
	SetClientInitConfig(context.Context, *SetClientInitConfigReq) (*SetClientInitConfigResp, error)
	GetUserFriends(context.Context, *GetUserFriendsReq) (*GetUserFriendsResp, error)
	GetUserIDByEmailAndPhoneNumber(context.Context, *GetUserIDByEmailAndPhoneNumberReq) (*GetUserIDByEmailAndPhoneNumberResp, error)
	GetUserToken(context.Context, *GetUserTokenReq) (*GetUserTokenResp, error)
	mustEmbedUnimplementedAdminCMSServer()
}

// UnimplementedAdminCMSServer must be embedded to have forward compatible implementations.
type UnimplementedAdminCMSServer struct {
}

func (UnimplementedAdminCMSServer) AdminLogin(context.Context, *AdminLoginReq) (*AdminLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminLogin not implemented")
}
func (UnimplementedAdminCMSServer) AddUserRegisterAddFriendIDList(context.Context, *AddUserRegisterAddFriendIDListReq) (*AddUserRegisterAddFriendIDListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserRegisterAddFriendIDList not implemented")
}
func (UnimplementedAdminCMSServer) ReduceUserRegisterAddFriendIDList(context.Context, *ReduceUserRegisterAddFriendIDListReq) (*ReduceUserRegisterAddFriendIDListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReduceUserRegisterAddFriendIDList not implemented")
}
func (UnimplementedAdminCMSServer) GetUserRegisterAddFriendIDList(context.Context, *GetUserRegisterAddFriendIDListReq) (*GetUserRegisterAddFriendIDListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRegisterAddFriendIDList not implemented")
}
func (UnimplementedAdminCMSServer) GetChatLogs(context.Context, *GetChatLogsReq) (*GetChatLogsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatLogs not implemented")
}
func (UnimplementedAdminCMSServer) GetActiveUser(context.Context, *GetActiveUserReq) (*GetActiveUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveUser not implemented")
}
func (UnimplementedAdminCMSServer) GetActiveGroup(context.Context, *GetActiveGroupReq) (*GetActiveGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveGroup not implemented")
}
func (UnimplementedAdminCMSServer) GetMessageStatistics(context.Context, *GetMessageStatisticsReq) (*GetMessageStatisticsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessageStatistics not implemented")
}
func (UnimplementedAdminCMSServer) GetGroupStatistics(context.Context, *GetGroupStatisticsReq) (*GetGroupStatisticsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupStatistics not implemented")
}
func (UnimplementedAdminCMSServer) GetUserStatistics(context.Context, *GetUserStatisticsReq) (*GetUserStatisticsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserStatistics not implemented")
}
func (UnimplementedAdminCMSServer) GenerateInvitationCode(context.Context, *GenerateInvitationCodeReq) (*GenerateInvitationCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateInvitationCode not implemented")
}
func (UnimplementedAdminCMSServer) GetInvitationCodes(context.Context, *GetInvitationCodesReq) (*GetInvitationCodesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvitationCodes not implemented")
}
func (UnimplementedAdminCMSServer) QueryIPRegister(context.Context, *QueryIPRegisterReq) (*QueryIPRegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryIPRegister not implemented")
}
func (UnimplementedAdminCMSServer) AddIPLimit(context.Context, *AddIPLimitReq) (*AddIPLimitResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIPLimit not implemented")
}
func (UnimplementedAdminCMSServer) RemoveIPLimit(context.Context, *RemoveIPLimitReq) (*RemoveIPLimitResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveIPLimit not implemented")
}
func (UnimplementedAdminCMSServer) QueryUserIDIPLimitLogin(context.Context, *QueryUserIDIPLimitLoginReq) (*QueryUserIDIPLimitLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUserIDIPLimitLogin not implemented")
}
func (UnimplementedAdminCMSServer) AddUserIPLimitLogin(context.Context, *AddUserIPLimitLoginReq) (*AddUserIPLimitLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserIPLimitLogin not implemented")
}
func (UnimplementedAdminCMSServer) RemoveUserIPLimit(context.Context, *RemoveUserIPLimitReq) (*RemoveUserIPLimitResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserIPLimit not implemented")
}
func (UnimplementedAdminCMSServer) GetClientInitConfig(context.Context, *GetClientInitConfigReq) (*GetClientInitConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientInitConfig not implemented")
}
func (UnimplementedAdminCMSServer) SetClientInitConfig(context.Context, *SetClientInitConfigReq) (*SetClientInitConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetClientInitConfig not implemented")
}
func (UnimplementedAdminCMSServer) GetUserFriends(context.Context, *GetUserFriendsReq) (*GetUserFriendsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFriends not implemented")
}
func (UnimplementedAdminCMSServer) GetUserIDByEmailAndPhoneNumber(context.Context, *GetUserIDByEmailAndPhoneNumberReq) (*GetUserIDByEmailAndPhoneNumberResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserIDByEmailAndPhoneNumber not implemented")
}
func (UnimplementedAdminCMSServer) GetUserToken(context.Context, *GetUserTokenReq) (*GetUserTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserToken not implemented")
}
func (UnimplementedAdminCMSServer) mustEmbedUnimplementedAdminCMSServer() {}

// UnsafeAdminCMSServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminCMSServer will
// result in compilation errors.
type UnsafeAdminCMSServer interface {
	mustEmbedUnimplementedAdminCMSServer()
}

func RegisterAdminCMSServer(s grpc.ServiceRegistrar, srv AdminCMSServer) {
	s.RegisterService(&AdminCMS_ServiceDesc, srv)
}

func _AdminCMS_AdminLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).AdminLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_AdminLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).AdminLogin(ctx, req.(*AdminLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_AddUserRegisterAddFriendIDList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserRegisterAddFriendIDListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).AddUserRegisterAddFriendIDList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_AddUserRegisterAddFriendIDList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).AddUserRegisterAddFriendIDList(ctx, req.(*AddUserRegisterAddFriendIDListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_ReduceUserRegisterAddFriendIDList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReduceUserRegisterAddFriendIDListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).ReduceUserRegisterAddFriendIDList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_ReduceUserRegisterAddFriendIDList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).ReduceUserRegisterAddFriendIDList(ctx, req.(*ReduceUserRegisterAddFriendIDListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_GetUserRegisterAddFriendIDList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRegisterAddFriendIDListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).GetUserRegisterAddFriendIDList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_GetUserRegisterAddFriendIDList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).GetUserRegisterAddFriendIDList(ctx, req.(*GetUserRegisterAddFriendIDListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_GetChatLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatLogsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).GetChatLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_GetChatLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).GetChatLogs(ctx, req.(*GetChatLogsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_GetActiveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).GetActiveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_GetActiveUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).GetActiveUser(ctx, req.(*GetActiveUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_GetActiveGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).GetActiveGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_GetActiveGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).GetActiveGroup(ctx, req.(*GetActiveGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_GetMessageStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessageStatisticsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).GetMessageStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_GetMessageStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).GetMessageStatistics(ctx, req.(*GetMessageStatisticsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_GetGroupStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupStatisticsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).GetGroupStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_GetGroupStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).GetGroupStatistics(ctx, req.(*GetGroupStatisticsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_GetUserStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserStatisticsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).GetUserStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_GetUserStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).GetUserStatistics(ctx, req.(*GetUserStatisticsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_GenerateInvitationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateInvitationCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).GenerateInvitationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_GenerateInvitationCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).GenerateInvitationCode(ctx, req.(*GenerateInvitationCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_GetInvitationCodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvitationCodesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).GetInvitationCodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_GetInvitationCodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).GetInvitationCodes(ctx, req.(*GetInvitationCodesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_QueryIPRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIPRegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).QueryIPRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_QueryIPRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).QueryIPRegister(ctx, req.(*QueryIPRegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_AddIPLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddIPLimitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).AddIPLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_AddIPLimit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).AddIPLimit(ctx, req.(*AddIPLimitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_RemoveIPLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveIPLimitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).RemoveIPLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_RemoveIPLimit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).RemoveIPLimit(ctx, req.(*RemoveIPLimitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_QueryUserIDIPLimitLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserIDIPLimitLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).QueryUserIDIPLimitLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_QueryUserIDIPLimitLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).QueryUserIDIPLimitLogin(ctx, req.(*QueryUserIDIPLimitLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_AddUserIPLimitLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserIPLimitLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).AddUserIPLimitLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_AddUserIPLimitLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).AddUserIPLimitLogin(ctx, req.(*AddUserIPLimitLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_RemoveUserIPLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserIPLimitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).RemoveUserIPLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_RemoveUserIPLimit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).RemoveUserIPLimit(ctx, req.(*RemoveUserIPLimitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_GetClientInitConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientInitConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).GetClientInitConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_GetClientInitConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).GetClientInitConfig(ctx, req.(*GetClientInitConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_SetClientInitConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetClientInitConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).SetClientInitConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_SetClientInitConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).SetClientInitConfig(ctx, req.(*SetClientInitConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_GetUserFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserFriendsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).GetUserFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_GetUserFriends_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).GetUserFriends(ctx, req.(*GetUserFriendsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_GetUserIDByEmailAndPhoneNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserIDByEmailAndPhoneNumberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).GetUserIDByEmailAndPhoneNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_GetUserIDByEmailAndPhoneNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).GetUserIDByEmailAndPhoneNumber(ctx, req.(*GetUserIDByEmailAndPhoneNumberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_GetUserToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).GetUserToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_GetUserToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).GetUserToken(ctx, req.(*GetUserTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminCMS_ServiceDesc is the grpc.ServiceDesc for AdminCMS service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminCMS_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin_cms.adminCMS",
	HandlerType: (*AdminCMSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AdminLogin",
			Handler:    _AdminCMS_AdminLogin_Handler,
		},
		{
			MethodName: "AddUserRegisterAddFriendIDList",
			Handler:    _AdminCMS_AddUserRegisterAddFriendIDList_Handler,
		},
		{
			MethodName: "ReduceUserRegisterAddFriendIDList",
			Handler:    _AdminCMS_ReduceUserRegisterAddFriendIDList_Handler,
		},
		{
			MethodName: "GetUserRegisterAddFriendIDList",
			Handler:    _AdminCMS_GetUserRegisterAddFriendIDList_Handler,
		},
		{
			MethodName: "GetChatLogs",
			Handler:    _AdminCMS_GetChatLogs_Handler,
		},
		{
			MethodName: "GetActiveUser",
			Handler:    _AdminCMS_GetActiveUser_Handler,
		},
		{
			MethodName: "GetActiveGroup",
			Handler:    _AdminCMS_GetActiveGroup_Handler,
		},
		{
			MethodName: "GetMessageStatistics",
			Handler:    _AdminCMS_GetMessageStatistics_Handler,
		},
		{
			MethodName: "GetGroupStatistics",
			Handler:    _AdminCMS_GetGroupStatistics_Handler,
		},
		{
			MethodName: "GetUserStatistics",
			Handler:    _AdminCMS_GetUserStatistics_Handler,
		},
		{
			MethodName: "GenerateInvitationCode",
			Handler:    _AdminCMS_GenerateInvitationCode_Handler,
		},
		{
			MethodName: "GetInvitationCodes",
			Handler:    _AdminCMS_GetInvitationCodes_Handler,
		},
		{
			MethodName: "QueryIPRegister",
			Handler:    _AdminCMS_QueryIPRegister_Handler,
		},
		{
			MethodName: "AddIPLimit",
			Handler:    _AdminCMS_AddIPLimit_Handler,
		},
		{
			MethodName: "RemoveIPLimit",
			Handler:    _AdminCMS_RemoveIPLimit_Handler,
		},
		{
			MethodName: "QueryUserIDIPLimitLogin",
			Handler:    _AdminCMS_QueryUserIDIPLimitLogin_Handler,
		},
		{
			MethodName: "AddUserIPLimitLogin",
			Handler:    _AdminCMS_AddUserIPLimitLogin_Handler,
		},
		{
			MethodName: "RemoveUserIPLimit",
			Handler:    _AdminCMS_RemoveUserIPLimit_Handler,
		},
		{
			MethodName: "GetClientInitConfig",
			Handler:    _AdminCMS_GetClientInitConfig_Handler,
		},
		{
			MethodName: "SetClientInitConfig",
			Handler:    _AdminCMS_SetClientInitConfig_Handler,
		},
		{
			MethodName: "GetUserFriends",
			Handler:    _AdminCMS_GetUserFriends_Handler,
		},
		{
			MethodName: "GetUserIDByEmailAndPhoneNumber",
			Handler:    _AdminCMS_GetUserIDByEmailAndPhoneNumber_Handler,
		},
		{
			MethodName: "GetUserToken",
			Handler:    _AdminCMS_GetUserToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin_cms/admin_cms.proto",
}
